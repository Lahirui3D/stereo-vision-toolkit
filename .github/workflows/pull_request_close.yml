name: Pull Request Close

# only trigger on main branch pull request close events
# used to deploy code after merging
on:
  pull_request:
    branches: [ main ]
    types: [ closed ]


jobs:
  # build and deploy new release
  deploy:
    # this job will only run if the PR has been merged
    # and the source branch is feature branch (feature/*)
    if: github.event.pull_request.merged == true && startsWith( github.head_ref, 'feature')
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      # Checkout submodules (required for fever module used in app update system)
      - name: Checkout submodules
        run: git submodule update --init --recursive
      # Setup build environment
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.14.2'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2017_64'
          dir: '${{ github.workspace }}/qt-install/'
          install-deps: 'true'
          modules: 'qtwebengine'
          tools-only: 'false'
      - name: Install jom, inno setup, doxygen
        shell: powershell
        run: | 
          choco install jom
          choco install innosetup
          choco install doxygen.install
      # Install 3rd party dependencies
      - name: Install 3rdparty
        shell: cmd
        run: |
          call "%programfiles(x86)%\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          .\scripts\3rdparty.bat
      # Build application
      - name: Build
        shell: cmd
        run: |
          call "%programfiles(x86)%\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          mkdir build
          cd build
          qmake.exe "CONFIG+=qtquickcompiler CONFIG+=WITH_I3DRSGM" ../stereo_vision_toolkit.pro -spec win32-msvc
          jom.exe
      # Update version in files
      - name: Update version
        shell: cmd
        run: |
          scripts\update_version.bat
      # Update documentation
      - name: Update docs
        shell: bash
        run: |
          ./scripts/docs.sh
      # Create installer
      - name: Create installer
        shell: cmd
        run: |
          iscc installer\installer.iss
      # Get project version
      - name: Get project version
        shell: bash
        run: |
          PROJ_VER=$(cat version.txt)
          echo "SVT_VERSION=$PROJ_VER" >> $GITHUB_ENV
      # Create GitHub release
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          body_path: release.md
          tag_name: v${{ env.SVT_VERSION }}
          files: |
            installer/Output/*.exe
            ReleaseNotes.html
            Appcast.xml