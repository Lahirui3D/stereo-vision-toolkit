name: QT Build

on:
  push:
    branches: [ main ]

  pull_request:
    branches: [ main ]

jobs:
    build:
        runs-on: windows-latest
        steps:
          - uses: actions/checkout@v2
          # Checkout submodules (required for fever module used in app update system)
          - name: Checkout submodules
            run: git submodule update --init --recursive
          # Setup build environment
          - name: Install Qt
            uses: jurplel/install-qt-action@v2
            with:
              version: '5.14.2'
              host: 'windows'
              target: 'desktop'
              arch: 'win64_msvc2017_64'
              dir: '${{ github.workspace }}/qt-install/'
              install-deps: 'true'
              modules: 'qtwebengine'
              tools-only: 'false'
          - name: Install jom and inno setup
            shell: cmd
            run: | 
              choco install jom
              choco install innosetup
          # Install 3rd party dependencies
          - name: Install 3rdparty
            shell: cmd
            run: |
              call "%programfiles(x86)%\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
              .\scripts\3rdparty.bat
          # Build application
          - name: Build
            shell: cmd
            run: |
              call "%programfiles(x86)%\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
              mkdir build
              cd build
              qmake.exe "CONFIG+=qtquickcompiler CONFIG+=DEV_BRANCH CONFIG+=WITH_VIMBA CONFIG+=WITH_I3DRSGM" ../stereo_vision_toolkit.pro -spec win32-msvc
              jom.exe
          # Update appcasts version for release
          - name: Update appcasts
            run: |
              .\scripts\update_appcasts.bat
              .\scripts\update_appcastsdev.bat
          # Create installer
          - name: Create installer
            shell: cmd
            run: |
              iscc installer\installer.iss
          # Get project version
          - name: Get project version
            shell: bash
            run: |
              PROJ_VER=$(cat version.txt)
              echo "SVT_VERSION=$PROJ_VER" >> $GITHUB_ENV
          # Create GitHub release
          - name: Release
            uses: softprops/action-gh-release@v1
            with:
              draft: false
              body_path: release.md
              tag_name: v${{ env.SVT_VERSION }}
              files: |
                installer/Output/*.exe
